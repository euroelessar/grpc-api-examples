# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto import scraping_pb2 as proto_dot_scraping__pb2


class ScraperStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.scrape = channel.stream_stream(
        '/Scraper/scrape',
        request_serializer=proto_dot_scraping__pb2.ScrapingRequest.SerializeToString,
        response_deserializer=proto_dot_scraping__pb2.ScrapingResponse.FromString,
        )


class ScraperServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def scrape(self, request_iterator, context):
    """Scraper receives scraping targets from the caller, and download the web
    pages for them. The web pages sent back will be processed, and strip urls
    that pending to be scraped. The caller should re-distribute those urls.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ScraperServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'scrape': grpc.stream_stream_rpc_method_handler(
          servicer.scrape,
          request_deserializer=proto_dot_scraping__pb2.ScrapingRequest.FromString,
          response_serializer=proto_dot_scraping__pb2.ScrapingResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Scraper', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
